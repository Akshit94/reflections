What happens when you initialize a repository?

	A .git hidden directory is created that contains all the basics for a repository.
 
Why do you need to do it?
	In order to make a repository of project and use the power of version-control
	to make it more efficient.


How is the staging area different from the working directory and the repository?
	Staging area is a step where you can review the changes or correct them if any
	error or bug appears before finally commiting it. In the working directory the files
	of the previous commit or the initial starting file are stored whereas in the 
	repository the final commited changes are stored.

What value do you think it offers?


	It offers us to check our project once more before finally comitting the changes
	thus leading to a more efficient project.

How can you use the staging area to make sure you have one commit per logical
 change?

	If multiple file needs to be updated in a logical change then instead of commiting
	each file differently we can first add them to staging area then commit them together.

What are some situations when branches would be helpful in keeping your history 
organized?
	when we want to make a different version of our project without relecting it on the
	original.
	when we need to create a experimental version of our project.
	want to create a new feature of the project
	when multiple people are working on a same project

How would branches help?

	it helps us by differentiating the work of multiple users working on the same project
	it helps by keeping track of different commits in different branches.

How do the diagrams help you visualize the branch structure?

	diagrams helps us by showing how different branches are related to one another and 
	what are the corresponding commits in each of those branches.

What is the result of merging two branches together?
	result is a combined branch having files from both branches.
 
Why do we represent it in 
the diagram the way we do?

	we represent it in the diagram in order to get a clear image of our project components
	and how they are interrelated with each other.

What are the pros and cons of Git’s automatic merging vs. always doing merges
 manually?

	git's automatic merging can sometimes lead to merging errors which are difficult to
	find and correct while doing it manually can be a tideous job but leads to a clean
	merge as we can manually find the changes between two commits using git diff and then
	correcting the code where there is merging error.